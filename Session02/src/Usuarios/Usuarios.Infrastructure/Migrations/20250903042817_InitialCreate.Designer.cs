// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Usuarios.Infrastructure;

#nullable disable

namespace Usuarios.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250903042817_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Usuarios.Domain.Roles.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_nombre");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Usuarios.Domain.Usuarios.DobleFactorAutenticacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo");

                    b.Property<int>("Estado")
                        .HasColumnType("integer")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("TipoDobleFactor")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_doble_factor");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_doble_factor_autenticacion");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_doble_factor_autenticacion_usuario_id");

                    b.ToTable("doble_factor_autenticacion", (string)null);
                });

            modelBuilder.Entity("Usuarios.Domain.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("CorreoElectronico")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("correo_electronico");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<DateTime>("FechaUltimoCambio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_ultimo_cambio");

                    b.Property<string>("NombrePersona")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre_persona");

                    b.Property<string>("NombreUsuario")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("nombre_usuario");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("password");

                    b.Property<Guid>("RolId")
                        .HasColumnType("uuid")
                        .HasColumnName("rol_id");

                    b.Property<uint>("version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_usuarios");

                    b.HasIndex("RolId")
                        .HasDatabaseName("ix_usuarios_rol_id");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Usuarios.Domain.Usuarios.DobleFactorAutenticacion", b =>
                {
                    b.HasOne("Usuarios.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany("DobleFactores")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doble_factor_autenticacion_usuario_usuario_id");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Usuarios.Domain.Usuarios.Usuario", b =>
                {
                    b.HasOne("Usuarios.Domain.Roles.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usuarios_roles_rol_id");

                    b.OwnsOne("Usuarios.Domain.Usuarios.Direccion", "Direccion", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_calle");

                            b1.Property<string>("Departamento")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_departamento");

                            b1.Property<string>("Distrito")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_distrito");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_pais");

                            b1.Property<string>("Provincia")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_provincia");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId")
                                .HasConstraintName("fk_usuarios_usuarios_id");
                        });

                    b.Navigation("Direccion");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Usuarios.Domain.Usuarios.Usuario", b =>
                {
                    b.Navigation("DobleFactores");
                });
#pragma warning restore 612, 618
        }
    }
}
